<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<!--
 * Copyright (c) 2005-2006 Creative Sphere Limited.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the LGPL licence
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/copyleft/lesser.html
 *
 * Contributors:
 *
 *   Creative Sphere - initial API and implementation
-->
<beans default-lazy-init="true">

  <!-- this same context path would be picked from the module's name -->
  <!-- context-path>/bean-console</context-path -->

  <!--
    Make following definition available if you want to have simple
    bean console anyone can access
    Note: don't forget to comment out next alias definition
  -->
  <alias name="web-application-main" alias="rest-application" />

  <!--
    Make following definition available if you want to have secure access
    to bean console through SSL + authentication from keystore provided.
    Note: don't forget to comment out previous alias definition
  -->
  <!-- alias name="web-application-secure" alias="web-application" / -->

  <!--
    This is main entry point for Danube web applications. A bean with 'web-application' name of
    ConnectionHandler class must exist. This bean ensures that it is accessed through HTTPS. If
    you try to access it through HTTP it redirects to port 8443 as HTTPS.

    Also, embedded in it is JAASAuthenticator that authenticates web application based on
    login module with 'testcontext' name (defined at the end of this file). It checks only for
    username and password - no extra credentials are needed.
  -->
  <bean name="web-application-secure" class="org.abstracthorizon.danube.http.util.EnsureHTTPS">
    <property name="handler">
      <bean class="org.abstracthorizon.danube.http.auth.JAASAuthenticator">
        <property name="loginContextName" value="testcontext"/>
        <property name="handler" ref="web-application-main"/>
      </bean>
    </property>
    <property name="port" value="8443"/>
  </bean>

  <!--
    This bean defines beans application context.
    It references to two components: File component that accepts only file named "style.css" and
    MVC controller defined at the root of this application ("/") and "/display" path.
    (this is an example of same component being defined at different paths)
  -->
  <bean name="web-application-main" class="org.abstracthorizon.danube.http.HTTPContext">
    <property name="components">
      <list>
        <bean class="org.abstracthorizon.danube.http.matcher.Pattern">
          <property name="pattern" value="/style\.css"/>
          <property name="connectionHandler" ref="beans-files"/>
          <property name="matchAsComponentPath" value="false"/>
        </bean>
        <bean class="org.abstracthorizon.danube.http.matcher.Pattern">
          <property name="pattern" value="/org\..*"/>
          <property name="connectionHandler" ref="beans-files"/>
          <property name="matchAsComponentPath" value="false"/>
        </bean>
        <bean class="org.abstracthorizon.danube.http.matcher.Pattern">
          <property name="pattern" value="/sc/.*"/>
          <property name="connectionHandler" ref="sc-beans-files"/>
          <property name="matchAsComponentPath" value="false"/>
        </bean>
        <bean class="org.abstracthorizon.danube.http.matcher.Pattern">
          <property name="pattern" value="/index\.html|/images/.*"/>
          <property name="connectionHandler" ref="beans-files"/>
          <property name="matchAsComponentPath" value="false"/>
        </bean>
        <bean class="org.abstracthorizon.danube.http.matcher.Prefix">
          <property name="prefix" value="/"/>
          <property name="connectionHandler" ref="mvc.display"/>
        </bean>
      </list>
    </property>
  </bean>

  <!--
    MVC controller
  -->
  <bean name="mvc.display" class="org.abstracthorizon.danube.http.HTTPMVCConnectionHandler">
    <property name="controller" ref="displayController"/>
    <property name="view" ref="mvc.viewAdapterInterceptor"/>
  </bean>
  
  <bean name="mvc.viewAdapterInterceptor" class="org.abstracthorizon.danube.beanconsole.ViewAdapterInterceptor">
    <property name="default" ref="freemarkerViewAdapter"/>
    <property name="json" ref="jsonViewAdapter"/>
  </bean>

  <!--
    This is display controller - a controller (ConnectionHandler) that prpares page to be displayed
  -->
  <bean name="displayController" class="org.abstracthorizon.danube.beanconsole.RESTController">
    <property name="componentPath" value=""/>
    <property name="rootObject" ref="parent-context"/>
  </bean>


  <!--
    This bean defines serving files from directory "pages" as given file path.
  -->
  <bean name="beans-files" class="org.abstracthorizon.danube.http.util.ReadOnlyFileConnectionHandler">
    <property name="filePath" value="pages"/>
  </bean>

  <!--
    This bean defines serving files from directory "pages" as given file path.
  -->
  <bean name="sc-beans-files" class="org.abstracthorizon.danube.http.util.ReadOnlyFileConnectionHandler">
    <property name="filePath" value="pages/org.abstracthorizon.danube.beanconsole.gwt.Application/"/>
  </bean>

  <!--
    This is FreeMarker view adapter.
    It defines directory "pages" as location of templates and ".page" as templates' suffix.
  -->
  <bean id="freemarkerViewAdapter" class="org.abstracthorizon.danube.freemarker.FreeMarkerViewAdapter" init-method="init">
    <property name="templatesURL" value="classpath:pages"/>
    <property name="suffix" value="page"/>
  </bean>

  <bean id="jsonViewAdapter" class="org.abstracthorizon.danube.http.json.JSONViewAdapter">
  </bean>


  <!--
    URL property editor is really handy and spring framework is already providing it!
    PropertyEditorManager.registerEditor(URL.class, URLEditor.class);
  -->
  <bean name="URLEditor" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
    <property name="staticMethod" value="java.beans.PropertyEditorManager.registerEditor"></property>
    <property name="arguments">
      <list>
        <value>java.net.URL</value>
        <value>org.springframework.beans.propertyeditors.URLEditor</value>
      </list>
    </property>
  </bean>

</beans>
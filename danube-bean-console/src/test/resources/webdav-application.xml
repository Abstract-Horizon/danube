<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<!--
 * Copyright (c) 2005-2006 Creative Sphere Limited.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the LGPL licence
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/copyleft/lesser.html
 *
 * Contributors:
 *
 *   Creative Sphere - initial API and implementation
-->
<beans default-lazy-init="true">

  <!-- this same context path would be picked from the module's name -->
  <!-- context-path>/bean-console</context-path -->

  <!--
    Make following definition available if you want to have simple
    bean console anyone can access
    Note: don't forget to comment out next alias definition
  -->
  <alias name="webdav-application-main" alias="webdav-application" />

  <!--
    This bean defines beans application context.
    It references to two components: File component that accepts only file named "style.css" and
    MVC controller defined at the root of this application ("/") and "/display" path.
    (this is an example of same component being defined at different paths)
  -->
  <bean name="webdav-application-main" class="org.abstracthorizon.danube.http.HTTPContext">
    <property name="components">
      <list>
        <bean class="org.abstracthorizon.danube.http.matcher.Pattern">
          <property name="pattern" value="/style\.css"/>
          <property name="connectionHandler" ref="webdav-support-files"/>
          <property name="matchAsComponentPath" value="false"/>
        </bean>
        <bean class="org.abstracthorizon.danube.http.matcher.Pattern">
          <property name="pattern" value=".*/index\.html"/>
          <property name="connectionHandler" ref="mvc.display"/>
          <property name="matchAsComponentPath" value="false"/>
        </bean>
        <bean class="org.abstracthorizon.danube.http.matcher.Prefix">
          <property name="prefix" value="/"/>
          <property name="connectionHandler" ref="webdav-handler"/>
        </bean>
      </list>
    </property>
  </bean>


  <!--
    MVC controller
  -->
  <bean name="webdav-handler" class="org.abstracthorizon.danube.webdav.java.JavaWebDAVHandler">
    <property name="rootObject" ref="parent-context"/>
  </bean>


  <!--
    This bean defines serving files from directory "pages" as given file path.
  -->
  <bean name="webdav-support-files" class="org.abstracthorizon.danube.webdav.fs.FileSystemWebDAVConnectionHandler">
    <property name="filePath" value="pages"/>
    <property name="readOnly" value="true"/>
  </bean>


  <!--
    MVC controller
  -->
  <bean name="mvc.display" class="org.abstracthorizon.danube.http.HTTPMVCConnectionHandler">
    <property name="controller" ref="displayController"/>
    <property name="view" ref="freemarkerViewAdapter"/>
  </bean>

  <!--
    This is display controller - a controller (ConnectionHandler) that prpares page to be displayed
  -->
  <bean name="displayController" class="org.abstracthorizon.danube.beanconsole.DisplayController">
    <property name="componentPath" value=""/>
    <property name="rootObject" ref="parent-context"/>
    <property name="pageName" value="index.html"/>
  </bean>

  <!--
    This controllers invokes
  -->
  <bean name="invokeController" class="org.abstracthorizon.danube.http.HTTPMVCConnectionHandler">
    <property name="controller">
      <bean class="org.abstracthorizon.danube.beanconsole.InvokeController">
        <constructor-arg ref="displayController" />
      </bean>
    </property>
    <property name="view" ref="freemarkerViewAdapter"/>
  </bean>

  <!--
    This is FreeMarker view adapter.
    It defines directory "pages" as location of templates and ".page" as templates' suffix.
  -->
  <bean id="freemarkerViewAdapter" class="org.abstracthorizon.danube.freemarker.FreeMarkerViewAdapter" init-method="init">
    <property name="templatesURL" value="classpath:pages"/>
    <property name="suffix" value="page"/>
  </bean>


  <!--
    URL property editor is really handy and spring framework is already providing it!
    PropertyEditorManager.registerEditor(URL.class, URLEditor.class);
  -->
  <bean name="URLEditor" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
    <property name="staticMethod" value="java.beans.PropertyEditorManager.registerEditor"></property>
    <property name="arguments">
      <list>
        <value>java.net.URL</value>
        <value>org.springframework.beans.propertyeditors.URLEditor</value>
      </list>
    </property>
  </bean>

</beans>